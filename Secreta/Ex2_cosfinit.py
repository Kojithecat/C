# -*- coding: utf-8 -*-
"""cosfinit.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JbVgpmgjMmDephv9fo6en0NNaG0WjNXx
"""

def GF_product_p(a,b):
  l = 0
  shift_a = a
  shift_b = b
  while shift_b > 0:
    if shift_b % 2 == 1 :
      l = l ^ shift_a
    shift_a = shift_a << 1
    if shift_a > 255 :
      shift_a = shift_a ^ m
    shift_b = shift_b >> 1
  return l

def GF_es_generador(a):
  visited = [False] * (2**8)
  i = a
  j = 0
  while not(visited[i]) and j < 255:
    visited[i] = True
    i = GF_product_p(i,a)
    j += 1
  return j == 255

def GF_tables():
  g = int('00000010',2)
  g_pow = g
  exp = [1] + [0] * (255)
  log = [None] + [0] * (255)
  for i in range(1,2**8):
    exp[i] = g_pow
    log[g_pow] = i
    g_pow = GF_product_p(g_pow,g)
  return exp, log

def GF_product_t(a,b):
  if a == 0 or b == 0 :
    return 0
  else :
    i = (log[a]+log[b]) % 255
    return exp[i]

def GF_invers(a):
  if a == 0 :
    print("-----")
    print("inv0")
    print("-----")
    return 0
  i = 255 - log[a]
  return exp[i]

def test_prod_p():
  print()
  print("Computated product tests (2)")
  print()
  print("(1/2) Conmutative test: ",end="")
  for x in range(2**8):
    for y in range(2**8):
      u = GF_product_p(x,y)
      v = GF_product_p(y,x)
      if u != v :
        print("ERROR")
        return
  print("PASS")
  print("(2/2) Neutral element test: ",end="")
  for x in range(2**8):
    u = GF_product_p(x,1)
    if u != x :
      print("ERROR")
      return
  print("PASS")

def test_prod_t():
  print()
  print("Table product tests (3)")
  print()
  #exp, log = GF_tables()
  print("(1/3) Conmutative test: ",end="")
  for x in range(2**8):
    for y in range(2**8):
      u = GF_product_t(x,y)
      v = GF_product_t(y,x)
      if u != v :
        print("ERROR")
        return
  print("PASS")
  print("(2/3) Neutral element test: ",end="")
  for x in range(2**8):
    u = GF_product_t(x,1)
    if u != x :
      print("ERROR")
      return
  print("PASS")
  print("(3/3) Equality with product test: ",end="")
  for x in range(2**8):
    for y in range(2**8):
      u = GF_product_p(x,y)
      v = GF_product_t(x,y)
      if u != v :
        print("ERROR")
        return
  print("PASS")

def test_inv():
  print()
  print("Inverse tests (1)")
  print()
  exp, log = GF_tables()
  print("(1/1) Poduct is one test: ",end="")
  for x in range(1,255):
    y = GF_invers(x)
    u = GF_product_p(x,y)
    if u != 1 :
      print("ERROR")
      return
  print("PASS")

#manual check for generators (check all are points by scrolling down
#first on the right side then on the left side)
def test_generador():
  for x in range(2**8):
    if (GF_es_generador(x)) :
      print()
      print(x)
      visited = [False] * (2**8)
      a = x
      i = a
      j = 0
      while not(visited[i]) and j < 255:
        visited[i] = True
        i = GF_product_p(i,a)
        j += 1
      for x in visited:
        if not(x) : print("F",end="")
        else : print(".",end="")
      print()

import time
def test_time():
  a = 1
  start = time.time()
  GF_product_p(a,int('02',16))
  end = time.time()
  print("Tiempo p 0x02")
  print((end - start)*1000)
  start = time.time()
  GF_product_t(a,int('02',16))
  end = time.time()
  print("Tiempo t 0x02")
  print((end - start)*1000)

  start = time.time()
  GF_product_p(a,int('03',16))
  end = time.time()
  print("Tiempo p 0x03")
  print((end - start)*1000)
  start = time.time()
  GF_product_t(a,int('03',16))
  end = time.time()
  print("Tiempo t 0x03")
  print((end - start)*1000)

  start = time.time()
  GF_product_p(a,int('09',16))
  end = time.time()
  print("Tiempo p 0x09")
  print((end - start)*1000)
  start = time.time()
  GF_product_t(a,int('09',16))
  end = time.time()
  print("Tiempo t 0x09")
  print((end - start)*1000)

  start = time.time()
  GF_product_p(a,int('0B',16))
  end = time.time()
  print("Tiempo p 0x0B")
  print((end - start)*1000)
  start = time.time()
  GF_product_t(a,int('0B',16))
  end = time.time()
  print("Tiempo t 0x0B")
  print((end - start)*1000)

  start = time.time()
  GF_product_p(a,int('0D',16))
  end = time.time()
  print("Tiempo p 0x0D")
  print((end - start)*1000)
  start = time.time()
  GF_product_t(a,int('0D',16))
  end = time.time()
  print("Tiempo t 0x0D")
  print((end - start)*1000)

  start = time.time()
  GF_product_p(a,int('0E',16))
  end = time.time()
  print("Tiempo p 0x0E")
  print((end - start)*1000)
  start = time.time()
  GF_product_t(a,int('0E',16))
  end = time.time()
  print("Tiempo t 0x0E")
  print((end - start)*1000)

m = int('100011101',2)

#x*y = z
x = int('01010111',2)
y = int('10000011',2)
z = int('00110001',2)
#the two bins should be the same
print(bin(GF_product_p(x,y)) + " ?= " + bin(z))

#test_generador()

test_prod_p()

#print tables
exp, log = GF_tables()
#for x in range(1,256):
#  print("x: " + str(x) + " exp(x): " + str(exp[x]) + " log(x): " + str(log[x]))

test_prod_t()

test_inv()

test_time()